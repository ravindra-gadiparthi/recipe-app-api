from core.models import Recipe, Tag, Ingredientfrom django.test import TestCasefrom django.urls import reversefrom recipe.serializers import RecipeSerializer, RecipeDetailSerializerfrom rest_framework import statusfrom rest_framework.test import APIClientfrom .user_utils import create_sample_userRECIPE_URL = reverse('recipe:recipe-list')def get_recipe_details_url(recipe_id):    """Returns Recipe details url"""    return reverse('recipe:recipe-detail', args=[recipe_id])def create_sample_tag(user, name='Sample Tag'):    """ Create Sample tag"""    return Tag.objects.create(user=user, name=name)def create_sample_ingredient(user, name='Sample Ingredient'):    """Create a sample recipe Ingredient"""    return Ingredient.objects.create(user=user, name=name)def sample_recipe(user, **params):    """Create and return a sample recipe"""    default = {        'title': 'sample recipe',        'time_minutes': 10,        'price': 5.00    }    default.update(params)    return Recipe.objects.create(user=user, **default)class PublicRecipeApiTestCase(TestCase):    def setUp(self):        self.client = APIClient()    def test_recipe_list_access(self):        """Test Unauthenticated user don't have access to recipe list"""        res = self.client.get(RECIPE_URL)        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)class PrivateTapRecipeTestCases(TestCase):    def setUp(self):        self.user = create_sample_user()        self.client = APIClient()        self.client.force_authenticate(self.user)    def test_recipe_list_access(self):        """Test authenticated user has access to recipe list"""        sample_recipe(self.user)        sample_recipe(self.user)        recipes = Recipe.objects.all().order_by('-id')        recipe_serializer = RecipeSerializer(recipes, many=True)        res = self.client.get(RECIPE_URL)        self.assertEqual(res.status_code, status.HTTP_200_OK)        self.assertEqual(res.data, recipe_serializer.data)    def test_recipe_limited_access(self):        """        Test Authenticated user has        only limited access to recipe list        """        sample_recipe(self.user, title='new recipe')        sample_recipe(create_sample_user(email="test1@example.com"))        recipes = Recipe.objects.all().filter(user=self.user)        recipe_serializer = RecipeSerializer(recipes, many=True)        res = self.client.get(RECIPE_URL)        self.assertEqual(res.status_code, status.HTTP_200_OK)        self.assertEqual(len(res.data), 1)        self.assertEqual(res.data, recipe_serializer.data)    def test_recipe_details(self):        """Test Recipe detail with authenticated user"""        recipe = sample_recipe(self.user)        recipe.tags.add(create_sample_tag(self.user))        recipe.ingredients.add(create_sample_ingredient(self.user))        serializer = RecipeDetailSerializer(recipe)        res = self.client.get(get_recipe_details_url(recipe.id))        self.assertEqual(res.status_code, status.HTTP_200_OK)        self.assertEqual(res.data, serializer.data)    def test_basic_create_recipe(self):        """Test basic recipe creation """        payload = {            'title': 'sample recipe',            'time_minutes': 10,            'price': 5.00        }        res = self.client.post(RECIPE_URL, payload)        recipe = Recipe.objects.get(id=res.data['id'])        self.assertEqual(res.status_code, status.HTTP_201_CREATED)        for key in payload.keys():            self.assertEqual(payload[key], getattr(recipe, key))    def test_create_recipe_with_tag(self):        tag1 = create_sample_tag(self.user, 'Vegan')        tag2 = create_sample_tag(self.user, 'breakfast')        payload = {            'title': 'Maggie',            'time_minutes': 5,            'price': 10.00,            'tags': [tag1.id, tag2.id]        }        res = self.client.post(RECIPE_URL, payload)        recipe = Recipe.objects.get(id=res.data['id'])        tags = recipe.tags.all()        self.assertEqual(res.status_code, status.HTTP_201_CREATED)        self.assertEqual(len(tags), 2)        self.assertIn(tag1, tags)        self.assertIn(tag2, tags)    def test_create_recipe_with_ingredient(self):        ingredient1 = create_sample_ingredient(self.user, name='Maida')        ingredient2 = create_sample_ingredient(self.user, name='Egg')        payload = {            'title': 'cake',            'time_minutes': 30,            'price': 20.00,            'ingredients': [ingredient1.id, ingredient2.id]        }        res = self.client.post(RECIPE_URL, payload)        recipe = Recipe.objects.get(id=res.data['id'])        ingredients = recipe.ingredients.all()        self.assertEqual(len(ingredients), 2)        self.assertIn(ingredient1, ingredients)        self.assertIn(ingredient2, ingredients)    def test_partial_update_recipes(self):        """Test Recipe partial update"""        recipe = sample_recipe(self.user)        tag = create_sample_tag(self.user)        recipe.tags.add(tag)        updated_tag = create_sample_tag(self.user, name='NonVeg')        payload = {            'title': 'a new recipe',            'time_minutes': 10,            'price': 5.00,            'tags': [updated_tag.id]        }        res = self.client.patch(get_recipe_details_url(recipe.id), payload)        self.assertEqual(res.status_code, status.HTTP_200_OK)        recipe.refresh_from_db()        self.assertEqual(recipe.title, payload['title'])        self.assertIn(updated_tag, recipe.tags.all())    def test_update_recipes(self):        """Test Recipe update"""        recipe = sample_recipe(self.user)        tag = create_sample_tag(self.user)        recipe.tags.add(tag)        payload = {            'title': 'a new recipe',            'time_minutes': 11,            'price': 15.00,        }        res = self.client.put(get_recipe_details_url(recipe.id), payload)        self.assertEqual(res.status_code, status.HTTP_200_OK)        recipe.refresh_from_db()        self.assertEqual(recipe.title, payload['title'])        self.assertEqual(recipe.time_minutes, payload['time_minutes'])        self.assertEqual(recipe.price, payload['price'])        self.assertEqual(recipe.tags.count(), 0)