from core.models import Recipefrom django.test import TestCasefrom django.urls import reversefrom recipe.serializers import RecipeSerializerfrom rest_framework import statusfrom rest_framework.test import APIClientfrom .user_utils import create_sample_userRECIPE_URL = reverse('recipe:recipe-list')def sample_recipe(user, **params):    """Create and return a sample recipe"""    default = {        'title': 'sample recipe',        'time_minutes': 10,        'price': 5.00    }    default.update(params)    return Recipe.objects.create(user=user, **default)class PublicRecipeApiTestCase(TestCase):    def setUp(self):        self.client = APIClient()    def test_recipe_list_access(self):        """Test Unauthenticated user don't have access to recipe list"""        res = self.client.get(RECIPE_URL)        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)class PrivateTapRecipeTestCases(TestCase):    def setUp(self):        self.user = create_sample_user()        self.client = APIClient()        self.client.force_authenticate(self.user)    def test_recipe_list_access(self):        """Test authenticated user has access to recipe list"""        sample_recipe(self.user)        sample_recipe(self.user)        recipes = Recipe.objects.all().order_by('-id')        recipe_serializer = RecipeSerializer(recipes, many=True)        res = self.client.get(RECIPE_URL)        self.assertEqual(res.status_code, status.HTTP_200_OK)        self.assertEqual(res.data, recipe_serializer.data)    def test_recipe_limited_access(self):        """        Test Authenticated user has        only limited access to recipe list        """        sample_recipe(self.user, title='new recipe')        sample_recipe(create_sample_user(email="test1@example.com"))        recipes = Recipe.objects.all().filter(user=self.user)        recipe_serializer = RecipeSerializer(recipes, many=True)        res = self.client.get(RECIPE_URL)        self.assertEqual(res.status_code, status.HTTP_200_OK)        self.assertEqual(len(res.data), 1)        self.assertEqual(res.data, recipe_serializer.data)