from django.contrib.auth import get_user_modelfrom django.test import TestCasefrom django.urls import reversefrom rest_framework import statusfrom rest_framework.test import APIClientCREATE_USER_URL = reverse('user:create')CREATE_API_TOKEN = reverse('user:token')MANAGE_USER_URL = reverse('user:manage')VALID_USER_PAYLOAD = {    'name': 'test',    'email': 'test@londonappdev.com',    'password': 'password'}def create_user(**params):    return get_user_model().objects.create_user(**params)class PublicUserApiTests(TestCase):    """Test user api (public)"""    def setUp(self):        self.client_class = APIClient()    def test_create_user_success(self):        """Test create user with valid payload success"""        res = self.client_class.post(CREATE_USER_URL, VALID_USER_PAYLOAD)        self.assertEqual(res.status_code, status.HTTP_201_CREATED)        user = get_user_model().objects.get(**res.data)        self.assertTrue(user.check_password(VALID_USER_PAYLOAD['password']))    def test_create_existing_user(self):        """Test create user with existing user"""        create_user(**VALID_USER_PAYLOAD)        res = self.client_class.post(CREATE_USER_URL, VALID_USER_PAYLOAD)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_user_with_password_too_short(self):        """Test user with too short password"""        payload = VALID_USER_PAYLOAD.copy()        payload['password'] = 'pass'        res = self.client_class.post(CREATE_USER_URL, payload)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_create_token_with_valid_credentials(self):        """Test token generation with valid credentials"""        create_user(**VALID_USER_PAYLOAD)        res = self.client.post(CREATE_API_TOKEN, VALID_USER_PAYLOAD)        self.assertIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_200_OK)    def test_create_token_with_invalid_credentials(self):        """Test token generation with valid credentials"""        payload = {'email': 'test@londonappdev.com', 'password': 'password1'}        create_user(**VALID_USER_PAYLOAD)        res = self.client_class.post(CREATE_API_TOKEN, payload)        self.assertNotIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_create_token_with_no_user(self):        """Test token generation with valid credentials"""        res = self.client_class.post(CREATE_API_TOKEN, VALID_USER_PAYLOAD)        self.assertNotIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_create_token_with_no_email(self):        """Test token generation with valid credentials"""        payload = {'email': 'test@example.com'}        res = self.client_class.post(CREATE_API_TOKEN, payload)        self.assertNotIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_manage_user_requires_authentication(self):        """Test manage user endpoint requires authentication"""        res = self.client_class.put(MANAGE_USER_URL)        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)class PrivateUseApiTests(TestCase):    """Test API Requires Authentication"""    def setUp(self):        """initialize tests"""        self.user = create_user(**VALID_USER_PAYLOAD)        self.client_class = APIClient()        self.client_class.force_authenticate(self.user)    def test_retrieve_profile_success(self):        """Test User can retrieve profile with valid authentication"""        res = self.client_class.get(MANAGE_USER_URL)        self.assertEqual(res.status_code, status.HTTP_200_OK)        self.assertEqual(res.data, {            'name': VALID_USER_PAYLOAD['name'],            'email': VALID_USER_PAYLOAD['email']        })    def test_post_unsuccessful(self):        """Test User can't post to manage endpoint"""        res = self.client_class.post(MANAGE_USER_URL, {})        self.assertEquals(res.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)    def tet_update_user_profile_success(self):        """Test User Profile update for authenticated user"""        user = self.user.copy()        user.name = 'updated user'        res = self.client_class.patch(MANAGE_USER_URL, user)        self.user.refresh_from_db()        self.assertEqual(self.user.name, user.name)        self.assertEqual(res.status_code, status.HTTP_200_OK)