from django.urls import reversefrom django.contrib.auth import get_user_modelfrom django.test import TestCasefrom rest_framework.test import APIClientfrom rest_framework import statusCREATE_USER_URL = reverse('user:create')CREATE_API_TOKEN = reverse('user:token')VALID_USER_PAYLOAD = {'name': 'test', 'email': 'test@londonappdev.com', 'password': 'password'}def create_user(**params):    get_user_model().objects.create_user(**params)class PublicUserApiTests(TestCase):    """Test user api (public)"""    def setUp(self):        self.client_class = APIClient()    def test_create_user_success(self):        """Test create user with valid payload success"""        res = self.client_class.post(CREATE_USER_URL, VALID_USER_PAYLOAD)        self.assertEqual(res.status_code, status.HTTP_201_CREATED)        user = get_user_model().objects.get(**res.data)        self.assertTrue(user.check_password(VALID_USER_PAYLOAD['password']))    def test_create_existing_user(self):        """Test create user with existing user"""        create_user(**VALID_USER_PAYLOAD)        res = self.client_class.post(CREATE_USER_URL, VALID_USER_PAYLOAD)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_user_with_password_too_short(self):        """Test user with too short password"""        payload = {            'name': 'test',            'email': 'test@example.com',            'password': 'test'        }        res = self.client_class.post(CREATE_USER_URL, payload)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_create_token_with_valid_credentials(self):        """Test token generation with valid credentials"""        payload = {'email': 'test@londonappdev.com', 'password': 'testpass'}        create_user(**payload)        res = self.client.post(CREATE_API_TOKEN, payload)        self.assertIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_200_OK)    def test_create_token_with_invalid_credentials(self):        """Test token generation with valid credentials"""        payload = {'email': 'test@londonappdev.com', 'password': 'password1'}        create_user(**VALID_USER_PAYLOAD)        res = self.client_class.post(CREATE_API_TOKEN, payload)        self.assertNotIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_create_token_with_no_user(self):        """Test token generation with valid credentials"""        res = self.client_class.post(CREATE_API_TOKEN, VALID_USER_PAYLOAD)        self.assertNotIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)    def test_create_token_with_no_email(self):        """Test token generation with valid credentials"""        payload = {'email': 'test@example.com'}        res = self.client_class.post(CREATE_API_TOKEN, payload)        self.assertNotIn('token', res.data)        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)